import { ExtendedError } from '../models/extended-error';

/**
 * Simple logger system with the possibility of registering custom outputs.
 *
 * 4 different log levels are provided, with corresponding methods:
 * - debug   : for debug information
 * - info    : for informative status of the application (success, ...)
 * - warning : for non-critical errors that do not prevent normal application behavior
 * - error   : for critical errors that prevent normal application behavior
 *
 * Example usage:
 * ```
 * import { Logger } from 'app/core/logger.service';
 *
 * const log = new Logger('myFile');
 * ...
 * log.debug('something happened');
 * ```
 *
 * To disable the logs per instance pass the LogLevel.Off to the constructor:
 * ```
 * const log = new Logger('myFile', LogLevel.Off);
 *
 *
 * To disable debug and info logs in production, add this snippet to your root component:
 * ```
 * export class AppComponent implements OnInit {
 *   ngOnInit() {
 *     if (environment.production) {
 *       Logger.enableProductionMode();
 *     }
 *     ...
 *   }
 * }
 *
 * If you want to process logs through other outputs than console, you can add LogOutput functions to Logger.outputs.
 */

/**
 * The possible log levels.
 * LogLevel.Off is never emitted and only used with Logger.level property to disable logs.
 */
export enum LogLevel {
  Off = 0,
  Error,
  Warning,
  Info,
  Debug,
  Verbose
}

/**
 * Log output handler function.
 */
export type LogOutput = (source: string, level: LogLevel, ...objects: any[]) => void;

export class Logger {

  /**
   * Set level to LogLevel.Off to disable logs (per instance) completely.
   */
  constructor(private source?: string, level = LogLevel.Debug) {
    this.logLevel = level;
  }

  /**
   * Used by log method to set the minimum log level
   * for production build
   */
  static isProduction = false;

  /**
   * Additional log outputs.
   */
  static outputs: LogOutput[] = [];

  /**
   * Stores the log level, which allows to change it per instance
   */
  private logLevel: LogLevel;

  /**
   * Enables production mode.
   * Sets logging level to LogLevel.Warning.
   */
  static enableProductionMode() {
    Logger.isProduction = true;
  }

  setSource(value: string) {
    this.source = value;
  }

  /**
   * Logs messages or objects  with the verbose level.
   * Works the same as console.log().
   */
  verbose(...objects: any[]) {
    this.log(console.log, LogLevel.Verbose, objects);
  }

  /**
   * Logs messages or objects  with the debug level.
   * Works the same as console.log().
   */
  debug(...objects: any[]) {
    this.log(console.log, LogLevel.Debug, objects);
  }

  /**
   * Logs messages or objects  with the info level.
   * Works the same as console.log().
   */
  info(...objects: any[]) {
    // tslint:disable-next-line:no-console
    this.log(console.info, LogLevel.Info, objects);
  }

  /**
   * Logs messages or objects  with the warning level.
   * Works the same as console.log().
   */
  warn(...objects: any[]) {
    this.log(console.warn, LogLevel.Warning, objects);
  }

  /**
   * Logs messages or objects  with the error level.
   * Works the same as console.log().
   */
  error(...objects: any[]) {
    this.log(console.error, LogLevel.Error, objects);
  }

  private log(func: Function, level: LogLevel, objects: any[]) {

    let isVisible = level <= this.logLevel;
    if (Logger.isProduction) isVisible = level <= LogLevel.Warning;

    if (isVisible) {
      const log = this.source ? ['[' + this.source + ']'].concat(objects) : objects;
      func.apply(console, log);
      Logger.outputs.forEach(output => output.apply(output, [this.source, level].concat(objects)));
    }
  }

  /**
   * Returns the object as a string
   *
   * @example log.debug( log.format( {id:1,value:'some value'} ) );
   * @param obj
   */
  format(obj: any) {
    // Format the error
    if (obj instanceof Error) {
      return this.getErrorAsString(obj);
    }

    return this.getAsString(obj);
  }

  private getAsString(data: any, indent: string = ''): string {
    if (data === true) return 'true';
    if (data === false) return 'false';
    if (!data) return '';
    if (data instanceof Error) return this.getErrorAsString(data);
    if (typeof data === 'string') return data.trim();
    if (typeof data === 'number') return data.toString();

    return JSON.stringify(data);
  }

  private getErrorAsString(err?: Error, indent: string = ''): string {
    if (!err) return '';

    // Get error stack trace
    const stack = err.stack;

    // Get error summary if no stack trace
    let str = stack || err.toString();

    // Use consistent line endings
    str = str.replace(/\r\n/g, '\n');

    // Indent error stack trace if required
    // Don't indent the first line as this will prevent Chrome showing the *.ts stack trace
    if (indent.length > 0) str = str.split('\n').join('\n' + indent);

    // Include inner error if any
    if (err instanceof ExtendedError) {
      const innerErr = (<ExtendedError>err).innerError;
      if (innerErr) {
        const innerStr = this.getErrorAsString(innerErr, indent + '  ');
        if (str.length > 0 && innerStr.length > 0) {
          let lines = str.split('\n');
          const innerLines = innerStr.split('\n');
          // Combine error messages to first line
          lines[0] += ' [' + innerLines[0] + ']';
          // Combine stack trace (inner will be indented)
          innerLines.splice(0, 1);
          lines = lines.concat(innerLines);
          str = lines.join('\n');
        } else str = innerStr;
      }
    }

    return str;
  }
}
